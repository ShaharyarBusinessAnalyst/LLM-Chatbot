# -*- coding: utf-8 -*-
"""LLM chatbot using Gemini.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OiXX7vn65biigP2tkx_4vq0RA-qyCAt_
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install -r requirements.txt

import os

import streamlit as st
from dotenv import load_dotenv           #to load api key in environment variable
import google.generativeai as gen_ai

#loading environment variable
load_dotenv()

# configuring streamlit page
st.set_page_config(
    page_title = "Chat with Gemini!",
    page_icon = ":robot:",
    layout="centered"
)

GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")

#setting up gemini pro model
gen_ai.configure(api_key=GOOGLE_API_KEY)
model = gen_ai.GenerativeModel('gemini-pro')

# Function to translate roles between Gemini-Pro and Streamlit terminology
def translate_role_for_streamlit(user_role):
    if user_role == "model":
        return "assistant"
    else:
        return user_role

#initializing a session in streamlit if not already present
if "chat_session" not in st.session_state:
    st.session_state.chat_session = model.start_chat(history=[])

# Display the chatbot's title on the page
st.title("ðŸ¤– Gemini Pro - ChatBot")

# Display the chat history
for message in st.session_state.chat_session.history:
    with st.chat_message(translate_role_for_streamlit(message.role)):
        st.markdown(message.parts[0].text)

# Input field for user's message
user_prompt = st.chat_input("Ask Gemini-Pro...")
if user_prompt:
    # Add user's message to chat and display it
    st.chat_message("user").markdown(user_prompt)

    # Send user's message to Gemini-Pro and get the response
    gemini_response = st.session_state.chat_session.send_message(user_prompt)

    # Display Gemini-Pro's response
    with st.chat_message("assistant"):
        st.markdown(gemini_response.text)


#$ streamlit run llm_chatbot_using_gemini.py